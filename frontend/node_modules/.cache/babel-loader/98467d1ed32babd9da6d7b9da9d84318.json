{"ast":null,"code":"import axios from 'axios';\nimport { ROOM_LIST_REQUEST, ROOM_LIST_SUCCESS, ROOM_LIST_FAIL, ROOM_DETAILS_REQUEST, ROOM_DETAILS_SUCCESS, ROOM_DETAILS_FAIL, ROOM_DELETE_SUCCESS, ROOM_DELETE_REQUEST, ROOM_DELETE_FAIL, ROOM_CREATE_REQUEST, ROOM_CREATE_SUCCESS, ROOM_CREATE_FAIL, ROOM_UPDATE_REQUEST, ROOM_UPDATE_SUCCESS, ROOM_UPDATE_FAIL, ROOM_CREATE_REVIEW_REQUEST, ROOM_CREATE_REVIEW_SUCCESS, ROOM_CREATE_REVIEW_FAIL } from '../constants/roomConstants';\nimport { logout } from './userActions';\nexport const listRooms = (keyword = '', pageNumber = '') => async dispatch => {\n  try {\n    dispatch({\n      type: ROOM_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms?keyword=${keyword}&pageNumber=${pageNumber}`);\n    dispatch({\n      type: ROOM_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOM_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listRoomDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ROOM_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/rooms/${id}`);\n    dispatch({\n      type: ROOM_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ROOM_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteRoom = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/rooms/${id}`, config);\n    dispatch({\n      type: ROOM_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ROOM_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createRoom = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/rooms`, {}, config);\n    dispatch({\n      type: ROOM_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ROOM_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateRoom = room => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/rooms/${room._id}`, room, config);\n    dispatch({\n      type: ROOM_UPDATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: ROOM_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ROOM_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createRoomReview = (roomId, review) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_CREATE_REVIEW_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.post(`/api/rooms/${roomId}/reviews`, review, config);\n    dispatch({\n      type: ROOM_CREATE_REVIEW_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ROOM_CREATE_REVIEW_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Mohamed Attia/Desktop/SILVER MOON/frontend/src/actions/roomActions.js"],"names":["axios","ROOM_LIST_REQUEST","ROOM_LIST_SUCCESS","ROOM_LIST_FAIL","ROOM_DETAILS_REQUEST","ROOM_DETAILS_SUCCESS","ROOM_DETAILS_FAIL","ROOM_DELETE_SUCCESS","ROOM_DELETE_REQUEST","ROOM_DELETE_FAIL","ROOM_CREATE_REQUEST","ROOM_CREATE_SUCCESS","ROOM_CREATE_FAIL","ROOM_UPDATE_REQUEST","ROOM_UPDATE_SUCCESS","ROOM_UPDATE_FAIL","ROOM_CREATE_REVIEW_REQUEST","ROOM_CREATE_REVIEW_SUCCESS","ROOM_CREATE_REVIEW_FAIL","logout","listRooms","keyword","pageNumber","dispatch","type","data","get","payload","error","response","message","listRoomDetails","id","deleteRoom","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createRoom","post","updateRoom","room","put","_id","createRoomReview","roomId","review"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  ROOM_LIST_REQUEST,\n  ROOM_LIST_SUCCESS,\n  ROOM_LIST_FAIL,\n  ROOM_DETAILS_REQUEST,\n  ROOM_DETAILS_SUCCESS,\n  ROOM_DETAILS_FAIL,\n  ROOM_DELETE_SUCCESS,\n  ROOM_DELETE_REQUEST,\n  ROOM_DELETE_FAIL,\n  ROOM_CREATE_REQUEST,\n  ROOM_CREATE_SUCCESS,\n  ROOM_CREATE_FAIL,\n  ROOM_UPDATE_REQUEST,\n  ROOM_UPDATE_SUCCESS,\n  ROOM_UPDATE_FAIL,\n  ROOM_CREATE_REVIEW_REQUEST,\n  ROOM_CREATE_REVIEW_SUCCESS,\n  ROOM_CREATE_REVIEW_FAIL,\n} from '../constants/roomConstants'\nimport { logout } from './userActions'\n\nexport const listRooms = (keyword = '', pageNumber = '') => async (\n  dispatch\n) => {\n  try {\n    dispatch({ type: ROOM_LIST_REQUEST })\n\n    const { data } = await axios.get(\n      `/api/rooms?keyword=${keyword}&pageNumber=${pageNumber}`\n    )\n\n    dispatch({\n      type: ROOM_LIST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ROOM_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const listRoomDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: ROOM_DETAILS_REQUEST })\n\n    const { data } = await axios.get(`/api/rooms/${id}`)\n\n    dispatch({\n      type: ROOM_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ROOM_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const deleteRoom = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_DELETE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/rooms/${id}`, config)\n\n    dispatch({\n      type: ROOM_DELETE_SUCCESS,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ROOM_DELETE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const createRoom = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_CREATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/rooms`, {}, config)\n\n    dispatch({\n      type: ROOM_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ROOM_CREATE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const updateRoom = (room) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ROOM_UPDATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(\n      `/api/rooms/${room._id}`,\n      room,\n      config\n    )\n\n    dispatch({\n      type: ROOM_UPDATE_SUCCESS,\n      payload: data,\n    })\n    dispatch({ type: ROOM_DETAILS_SUCCESS, payload: data })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ROOM_UPDATE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const createRoomReview = (roomId, review) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    dispatch({\n      type: ROOM_CREATE_REVIEW_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.post(`/api/rooms/${roomId}/reviews`, review, config)\n\n    dispatch({\n      type: ROOM_CREATE_REVIEW_SUCCESS,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: ROOM_CREATE_REVIEW_FAIL,\n      payload: message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}